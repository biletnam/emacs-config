* Header
** Licensing
This file is not part of GNU Emacs.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

** Commentary
This code is responsible for initializing all my Emacs configuration settings.

* Code
** Include Common Lisp
#+BEGIN_SRC emacs-lisp +n
(require 'cl)
#+END_SRC
** Constants
#+BEGIN_SRC emacs-lisp +n
(load-file "~/.emacs.d/detect.el")

(defvar init-profiling-enabled nil) ;; Enable profiling
(defvar init-debug-enabled nil)     ;; Enable debug messages
(defvar init-errors-enabled t)      ;; Enable errors

;; Test url for checking internet access
(defvar init-test-url (url-encode-url "http://ipecho.net/plain"))

;;(defvar init-extra-exec-path '("~/.emacs.d/bin")) ;; CONTROVERSIAL
(defvar init-extra-exec-path nil)

(defvar init-default-font-size 12)

(require 'detect)
#+END_SRC
** Global variables
#+BEGIN_SRC emacs-lisp +n
(defvar my-options nil)
(defvar my-packages nil)
#+END_SRC
** Global accessors / mutators
#+BEGIN_SRC emacs-lisp +n
(defun add-opt (opt &optional disabled)
  "Add OPT to the set of existing options.
If DISABLED is true, do nothing."
  (unless disabled
    (unless (optionp opt)
      (push opt my-options))))

(defun optionp (opt)
  "Is the given OPT an available option?"
  (member opt my-options))

(defun optionsp (opts)
  "Are the given OPTS available options?"
  (catch 'return
    (dolist (element opts)
      (unless (optionp element)
        (throw 'return nil)))
    (throw 'return t)))

(defun packagep (package)
  "Is the given PACKAGE installed?"
  (member package my-packages))

(defun add-package (&rest packages)
  "Add the given PACKAGES to `my-packages'."
  (unless (cl-every #'packagep packages)
    (setq my-packages (append my-packages packages))))

(defun add-to-packages (packages)
  "Add the given PACKAGES to `my-packages'."
  (dolist (element packages) (add-package element)))
#+END_SRC
** Utility functions
#+BEGIN_SRC emacs-lisp +n
(defun decrement (symbol)
  "Decrement the value held in the variable named SYMBOL."
  (let ((value (symbol-value symbol)))
    (if (numberp value)
        (set symbol (- value 1))
      (error "Wrong argument: decrement takes a numeric variable symbol"))))

(defun increment (symbol)
  "Increment the value held in the variable named SYMBOL."
  (let ((value (symbol-value symbol)))
    (if (numberp value)
        (set symbol (+ value 1))
      (error "Wrong argument: increment takes a numeric variable symbol"))))

(defun strikethrough-region (pt mk)
  "Strikethrough the selected plaintext region (from PT to MK)."
  (interactive "r")
  (save-excursion
    (goto-char pt)
    (let ((end mk))
      (while (<= (point) end)
        (insert-char ?-)
        (forward-char)
        (increment 'end)))))

(defun unstrikethrough-region (pt mk)
  "Remove a strikethrough in a plaintext region (from PT to MK)."
  (interactive "r")
  (save-excursion
    (goto-char pt)
    (while (not (= (char-after) ?-))
      (forward-char))
    (let ((end mk))
      (while (<= (point) end)
        (delete-char 1)
        (forward-char)
        (decrement 'end)))))

(defun profile-function (function &optional args)
  "Profile a given FUNCTION symbol with optional ARGS."
  (unless (symbolp function)
    (error "Wrong argument: in profile-function, FUNCTION is a symbol"))
  (unless (listp args)
    (error "Wrong argument: in profile-function, ARGS is a list"))
  (let ((elp-function-list (list function)))
    (elp-instrument-list)
    (apply function args)
    (elp-results)
    (elp-reset-list)))

(defun profile-functions (functions)
  "Profile the given FUNCTIONS (called with no arguments)."
  (unless (listp functions)
    (error "Wrong argument: in profile-functions, FUNCTIONS is a list"))
  (let ((elp-function-list functions))
    (elp-instrument-list)
    (dolist (element functions)
      (apply element nil))
    (elp-results)
    (elp-reset-list)))

(defun revert-all-buffers ()
  "Refreshes all open buffers from their respective files."
  (interactive)
  (dolist (buf (buffer-list))
    (with-current-buffer buf
      (when (and (buffer-file-name) (file-exists-p (buffer-file-name)) (not (buffer-modified-p)))
        (revert-buffer t t t) )))
  (message "Refreshed open files.") )

(defun executable-exists-p (exec-name)
  "Check if the given executable (EXEC-NAME) exists."
  (unless (stringp exec-name)
    (error "Wrong argument: executable-exists-p takes a string"))
  (executable-find exec-name))

(defun lucid-emacs-p ()
  "Return non-nil if you are running Lucid Emacs."
  (if (string-match "XEmacs\\|Lucid" emacs-version) t nil))
#+END_SRC
** Check prerequisites
#+BEGIN_SRC emacs-lisp +n
(defun init-check-prerequisites ()
  "Check prerequisites for initialization."
  (setq exec-path (append exec-path init-extra-exec-path))

  (unless (executable-exists-p "git")
    (error "Git is not installed")))
#+END_SRC
** Options
#+BEGIN_SRC emacs-lisp +n
;; EDIT THESE TO YOUR SATISFACTION

(defun init-customize-options ()
  "Initialize the my-options variable with your customizations."

  (add-opt 'extras                nil) ;; typically very unobjectionable stuff

  (add-opt 'ace-isearch           nil)
  (add-opt 'speedbar              nil)
  (add-opt 'sr-speedbar           t)
  (add-opt 'projectile            nil)
  (add-opt 'perspective           nil)
  (add-opt 'autorevert            nil)
  (add-opt 'company               nil)
  (add-opt 'flycheck              nil)
  (add-opt 'smex                  t)
  (add-opt 'helm                  nil)
  (add-opt 'rudel                 t)

  (add-opt 'org                   nil)
  (add-opt 'markdown              nil)
  (add-opt 'textile               nil)
  (add-opt 'yaml                  nil)
  (add-opt 'polymode              nil)

  (add-opt 'god-mode              nil)
  (add-opt 'subword               nil)
  (add-opt 'iedit                 nil)
  (add-opt 'fill-column-indicator nil)
  (add-opt 'fill-column-80        nil)
  (add-opt 'multi-term            nil)
  (add-opt 'rainbow-delimiters    nil)
  (add-opt 'prettify-symbols      t)

  (add-opt 'smartparens           nil)
  (add-opt 'adjust-parens         nil)

  (add-opt 'fix-emacs-cruft       nil)

  (add-opt 'line-numbers          nil)
  (add-opt 'powerline             nil)
  (add-opt 'smart-mode-line       nil)

  (add-opt 'malabar               t)

  (add-opt 'erc                   nil)
  (add-opt 'erc-fix               nil)
  (add-opt 'erc-notifications     nil)

  ;; CONTROVERSIAL DEFAULTS:

  ;; Email
  (add-opt 'wanderlust-email      nil)
  (add-opt 'offlineimap           nil)
  (add-opt 'elfeed                nil)
  

  ;; Window keybinds
  (add-opt 'meta-switch-windows   nil)
  (add-opt 'super-resize-windows  nil)

  ;; Theming
  (add-opt 'custom-fonts          nil)
  (add-opt 'solarized-dark        t)
  (add-opt 'solarized-light       t)
  (add-opt 'zenburn               nil)
  (add-opt 'thin-cursor           nil)

  ;; Editor keybinds
  (add-opt 'free-up-keys          nil)
  (add-opt 'comint-arrow-history  nil)
  (add-opt 'nano-yank-kill        nil)
  (add-opt 'cua-mode              nil)
  (add-opt 'fix-markdown          nil)
  (add-opt 'fix-org               nil)

  ;; Indentation
  (add-opt 'indent-spaces         nil)
  (add-opt 'electric-indent       nil)
  (add-opt 'haskell-indent-simple t)
  (add-opt 'sane-c-tab-width      nil)

  ;; Misc
  (add-opt 'term-mode-switch      nil)
  (add-opt 'undo-tree             t)

  (message "Available options: %S" my-options))
#+END_SRC
** CEDET fix
#+BEGIN_SRC emacs-lisp +n
;;(require 'cl)

;;(when (file-accessible-directory-p "~/.emacs.d/el-get/cedet-devel")
;;  (setq load-path (cl-remove-if (lambda (x) (string-match-p "cedet" x)) load-path))
;;  (load-file "~/.emacs.d/el-get/cedet-devel/cedet-devel-load.el"))
#+END_SRC
** Packages
#+BEGIN_SRC emacs-lisp +n
(defun init-generate-packages ()
  "Generate the list of packages to install."

  (when (optionp 'extras)                 (add-package 'help-fns+ 'git-auto-commit-mode
                                                       'cedet-devel 'el-get 'let-alist
                                                       'tramp 'diminish 'delight
                                                       'session))

  (when (optionp 'perspective)            (add-package 'perspective))
  (when (optionp 'projectile)             (add-package 'projectile))

  (when (optionp 'iedit)                  (add-package 'iedit))
  (when (optionp 'fill-column-indicator)  (add-package 'fill-column-indicator))
  (when (optionp 'multi-term)             (add-package 'multi-term))
  (when (optionp 'rainbow-delimiters)     (add-package 'rainbow-delimiters))
  (when (optionp 'sr-speedbar)            (add-package 'sr-speedbar))
  (when (optionp 'ace-isearch)            (add-package 'avy
                                                       'ace-jump-mode
                                                       'helm-swoop
                                                       'ace-isearch))

  (when (optionp 'wanderlust-email)       (add-package 'wanderlust))
  (when (optionp 'offlineimap)            (add-package 'offlineimap))
  (when (optionp 'elfeed)                 (add-package 'elfeed))

  (when (optionp 'org)                    (add-package 'org-mode))
  (when (optionp 'org-trello)             (add-package 'org-trello))
  (when (optionp 'yaml)                   (add-package 'yaml-mode))
  (when (optionp 'markdown)               (add-package 'markdown-mode))
  (when (optionp 'textile)                (add-package 'textile-mode))
  (when (optionp 'polymode)               (add-package 'polymode))

  (when (optionp 'rudel)                  (add-package 'rudel))
  (when (optionp 'smartparens)            (add-package 'smartparens))
  (when (optionp 'adjust-parens)          (add-package 'adjust-parens))
  (when (optionp 'flycheck)               (add-package 'flycheck))
  (when (optionp 'undo-tree)              (add-package 'undo-tree))

  (when (or (optionp 'solarized-dark)
            (optionp 'solarized-light))   (add-package 'color-theme-solarized))
  (when (optionp 'zenburn)                (add-package 'color-theme-zenburn))
  (when (optionp 'powerline)              (add-package 'powerline))
  (when (optionp 'smart-mode-line)        (add-package 'smart-mode-line))

  (when (optionp 'flx)                    (add-package 'flx 'flx-ido))
  (when (optionp 'helm)                   (add-package 'helm))
  (when (optionp 'smex)                   (add-package 'smex))
  (when (optionp 'company)                (add-package 'company-mode))
  (when (optionp 'god-mode)               (add-package 'god-mode))
  (when (optionp 'yasnippet)              (add-package 'yasnippet))

  (when (capabilityp "lang-haskell")      (add-package 'haskell-mode
                                                       'flycheck-haskell
                                                       'company-ghc
                                                       'ghc-mod
                                                       'hi2
                                                       'liquid-types
                                                       'haskell-input-method))
  (when (capabilityp "vcs-git")           (add-package 'magit))
  (when (capabilityp "lang-ledger")       (add-package 'ledger-mode))
  (when (capabilityp "lang-latex")        (add-package 'auctex))
  (when (capabilityp "lang-ocaml")        (add-package 'tuareg-mode 'utop))
  (when (capabilityp "lang-nix")          (add-package 'nix-mode))
  (when (capabilityp "lang-purescript")   (add-package 'purescript-mode))
  (when (capabilityp "lang-rust")         (add-package 'rust-mode
                                                       'toml-mode
                                                       'rustfmt))
  (when (capabilityp "lang-idris")        (add-package 'prop-menu
                                                       'idris-mode))
;;  (when (capabilityp "lang-elm")          (add-package 'elm-mode))
  (when (capabilityp "lang-kframework")   (add-package 'k3-mode))
  (when (capabilityp "lang-chicken")      (add-package 'geiser))
  (when (capabilityp "lang-guile")        (add-package 'geiser))
  (when (capabilityp "lang-racket")       (add-package 'geiser))
  (when (capabilityp "lang-zsh")          (add-package 'zlc))
;;  (when (capabilityp "util-pmd")          (add-package 'flycheck-pmd))
  (when (capabilityp "lang-java")         (add-package 'scala-mode
                                                       'ceylon-mode
                                                       'kotlin-mode
                                                       'groovy-mode
                                                       'javadoc-help
                                                       'javadoc-lookup
                                                       'javaimp))
  (when (and (capabilitiesp '("lang-java" "lang-groovy" "build-gradle"))
             (optionp 'malabar))          (add-package 'malabar-mode))

  (delete-dups my-packages)

  (message "Packages to install: %s" my-packages))
#+END_SRC
** el-get setup
#+BEGIN_SRC emacs-lisp +n
(defun init-setup-el-get ()
  "Check if el-get is installed, and, if not, install it."
  (add-to-list 'load-path "~/.emacs.d/el-get/el-get")

  ;; Add MELPA packages
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)

  ;; Install el-get if it isn't installed already
  (unless (require 'el-get nil t)
    (unless (capabilityp "internet")
      (error "No internet connection available, cannot install el-get"))
    (with-current-buffer
        (url-retrieve-synchronously
         "https://github.com/dimitri/el-get/raw/master/el-get-install.el")
      (goto-char (point-max))
      (eval-print-last-sexp))
    (el-get-emacswiki-build-local-recipes)
    (el-get-elpa-build-local-recipes))

  (require 'el-get)

  (defvar el-get-recipe-path)
  (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes"))

(defun init-sync-packages ()
  "Make the installed packages consistent with the contents of `my-packages'."
  (el-get 'sync my-packages)
  (el-get-cleanup my-packages))

(defun init-update-packages ()
  "Update all packages."
  (el-get-update-all))
#+END_SRC
** Require miscellaneous modules
#+BEGIN_SRC emacs-lisp +n
(defun init-require-modules ()
  "Require necessary modules for init.el."
  (require 'term)
  (when (optionp 'helm)
    (require 'helm)
    (require 'helm-config))
  (when (optionp 'erc)
    (require 'erc))
  (when (optionp 'extras)
    (require 'help-fns+))
  (when (optionp 'polymode)
    (require 'poly-R)
    (require 'poly-org)
    (require 'poly-markdown))
  (when (optionp 'fix-markdown)
    (require 'markdown-mode))
  (when (optionp 'fix-org)
    (require 'org))
  (when (optionp 'god-mode)
    (require 'god-mode))
  (when (optionp 'flycheck)
    (require 'flycheck))
  (when (optionp 'rainbow-delimiters)
    (require 'rainbow-delimiters))
  (when (optionp 'smartparens)
    (require 'smartparens-config))
  (when (optionp 'powerline)
    (require 'powerline))
  (when (optionp 'smart-mode-line)
    (require 'smart-mode-line))
  (when (optionp 'smex)
    (require 'smex))
  (when (optionp 'company)
    (require 'company))
  (when (optionp 'ace-isearch)
    (require 'ace-isearch))
  (when (optionp 'sr-speedbar)
    (require 'sr-speedbar))
  (when (optionp 'perspective)
    (require 'perspective))
  (when (and (optionp 'projectile)
             (optionp 'perspective))
    (require 'persp-projectile))
  (when (optionp 'comint-arrow-history)
    (require 'comint))
  (when (optionp 'undo-tree)
    (require 'undo-tree))

  (when (capabilityp "exec-haskell")
    (require 'haskell-mode)
    (require 'haskell-interactive-mode)
    (require 'haskell-simple-indent)
    (require 'hi2))

  (when (capabilityp "exec-lilypond") (require 'lilypond-mode)))
#+END_SRC
** Theming
#+BEGIN_SRC emacs-lisp +n
(defun init-theme-options ()
  "Initialize graphical/theme-related options."

  (xterm-mouse-mode)

  ;; Disable various annoyances that come with Emacs
  (when (and (capabilityp "graphics") (optionp 'fix-emacs-cruft))
    (setq inhibit-splash-screen t)
    (column-number-mode 1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (menu-bar-mode -1))

  ;; Set default frame font
  (when (and (capabilityp "graphics") (optionp 'custom-fonts))
    (defvar init-default-font
      (cond ((capabilityp "font-dejavu")        "DejaVu Sans Mono")
            ((capabilityp "font-pragmata")      "PragmataPro")
            ((capabilityp "font-inconsolata")   "Inconsolata")
            ((capabilityp "font-menlo")         "Menlo")
            ((capabilityp "font-meslo")         "Meslo")
            ((capabilityp "font-freefont")      "FreeMono")
            ((capabilityp "font-liberation")    "Liberation Mono")
            ((capabilityp "font-sourcecodepro") "Source Code Pro")
            ((capabilityp "font-luxi")          "Luxi Mono")
            ((capabilityp "font-consolas")      "Consolas")))
    (let ((my-font (format "%s-%d"
                           init-default-font
                           init-default-font-size)))
      (set-frame-font my-font nil t)
      (setq default-frame-alist
            (list (cons 'font my-font)))))

;; "-unknown-DejaVu Sans Mono for Powerline-normal-normal-normal-*-*-*-*-*-m-0-iso10646-1"

  ;; Line numbers
  (when (and (capabilityp "graphics") (optionp 'line-numbers))
    (line-number-mode 1)
    ;; (global-hl-line-mode)
    (global-linum-mode 1)
    (setq-default linum-format "%4d \u2502"))

  (defun linum-disable ()
    "Disable line numbers"
    (interactive)
    (linum-mode -1))

  ;; Disable line numbers for various modes
  (when (and (capabilityp "graphics") (optionp 'line-numbers))
    (add-hook 'term-mode-hook                  'linum-disable)
    (add-hook 'Info-mode-hook                  'linum-disable)
    (add-hook 'package-menu-mode-hook          'linum-disable)
    (when (optionp 'multi-term)
      (add-hook 'multi-term-mode-hook          'linum-disable))
    (when (capabilityp "exec-haskell")
      (add-hook 'haskell-interactive-mode-hook 'linum-disable))
    (when (optionp 'speedbar)
      (add-hook 'speedbar-mode-hook            'linum-disable))
    (when (optionp 'sr-speedbar)
      (add-hook 'sr-speedbar-mode-hook         'linum-disable)))

  ;; Set fill-column-indicator to blue and enable in prog-mode
  (when (optionp 'fill-column-indicator)
    (add-hook 'prog-mode-hook (lambda ()
                                (interactive)
                                (defvar fci-rule-color)
                                (setq fci-rule-color "lightblue")))
    (add-hook 'prog-mode-hook 'fci-mode))

  ;; Set fill-column to 80 by default
  (when (optionp 'fill-column-80)
    (setq-default fill-column 80))

  ;; Disable horizontal autoscroll in sr-speedbar
  (when (optionp 'sr-speedbar)
    (defvar disable-auto-hscroll (lambda () (setq auto-hscroll-mode nil)))
    (add-hook 'sr-speedbar-mode-hook         disable-auto-hscroll))

  ;; Enable zenburn theme
  (when (optionp 'zenburn)
    (load-theme 'zenburn t))

  ;; Enable solarized-light theme
  (when (optionp 'solarized-light)
    (load-theme 'solarized-light t))

  ;; Enable solarized-dark theme
  (when (optionp 'solarized-dark)
    (load-theme 'solarized-dark t))

  ;; Thin cursor
  (when (and (capabilityp "graphics") (optionp 'thin-cursor))
    (setq-default cursor-type 'bar))

  ;; Enable Powerline modeline
  (when (optionp 'powerline)
    (powerline-default-theme))

  ;; Smart mode line
  (when (optionp 'smart-mode-line)
    (setq-default sml/no-confirm-load-theme t)
    (sml/setup)))
#+END_SRC
** Editing
#+BEGIN_SRC emacs-lisp +n
(defun init-editing-options ()
  "Initialize editing options."

  ;; Globally prettify symbols
  (when (optionp 'prettify-symbols)
    (global-prettify-symbols-mode +1))

  ;; Move by subword in CamelCase
  (when (optionp 'subword)
    (global-subword-mode))

  ;; Auto-revert buffers every so often
  (when (optionp 'autorevert)
    (global-auto-revert-mode)
    (defvar auto-revert-check-vc-info t))


  (when (optionp 'adjust-parens)
    (require 'adjust-parens)
    (add-hook 'emacs-lisp-mode-hook #'adjust-parens-mode)
    (add-hook 'clojure-mode-hook    #'adjust-parens-mode)
    (add-hook 'scheme-mode-hook     #'adjust-parens-mode))

  ;; Smarter editing with matching delimiters
  (when (optionp 'smartparens)
    (smartparens-global-mode)
    (show-smartparens-global-mode))

  ;; On-the-fly syntax checking
  (when (optionp 'flycheck)
    (global-flycheck-mode))

  ;; Add multiple "perspectives" for buffers (i.e.: workspaces)
  (when (optionp 'perspective)
    (persp-mode 1)
    (persp-turn-on-modestring)
    ;; (global-set-key (kbd "C-x b") 
    ;;                 #'(lambda (arg)
    ;;                     (interactive "P")
    ;;                     (with-persp-buffer-list () (ibuffer arg))))
    )

  ;; Indent automagically
  (when (optionp 'electric-indent)
    (electric-indent-mode +1))

  ;; Simple indentation for Haskell
  (when (optionp 'haskell-indent-simple)
    (turn-on-haskell-simple-indent))

  ;; Better autocompletion
  (when (optionp 'company)
    (global-company-mode))

  ;; Better minibuffer autocompletion
  (when (optionp 'smex)
    (smex-initialize))

  ;; Available modes for geiser
  (when (packagep 'geiser)
    (defvar geiser-active-implementations)
    (setq geiser-active-implementations '())
    (when (capabilityp "lang-racket")
      (add-to-list 'geiser-active-implementations 'racket))
    (when (capabilityp "lang-guile")
      (add-to-list 'geiser-active-implementations 'guile))
    (when (capabilityp "lang-chicken")
      (add-to-list 'geiser-active-implementations 'chicken)))

  ;; Allow X11 copy-and-paste into buffers
  (when (capabilityp "graphics-x11")
    (setq x-select-enable-clipboard t))

  ;; Disable indenting with tabs by default
  (when (optionp 'indent-spaces)
    (setq-default indent-tabs-mode nil))

  ;; Enable undo-tree
  (when (optionp 'undo-tree)
    (global-undo-tree-mode))

  ;; Scroll compilation output
  (setq-default compilation-scroll-output t)

  ;; Set C tab width to 4
  (when (optionp 'sane-c-tab-width)
    (defvar c-default-style "linux")
    (setq-default c-basic-offset 4
                  tab-width 4))

  ;; Enable malabar-mode
  (when (and (capabilitiesp '("exec-jdk" "exec-groovy" "exec-gradle"))
             (optionp 'malabar))
    (add-hook 'after-init-hook 'activate-malabar-mode)))
#+END_SRC
** Keybindings
#+BEGIN_SRC emacs-lisp +n
(defun get-key-combo (key)
  "Just return the key combo entered by the user"
  (interactive "kKey combo: ")
  key)

(defun keymap-unset-key (key keymap)
    "Remove binding of KEY in a keymap
    KEY is a string or vector representing a sequence of keystrokes."
    (interactive
     (list (call-interactively #'get-key-combo)
           (completing-read "Which map: " minor-mode-map-alist nil t)))
    (let ((map (rest (assoc (intern keymap) minor-mode-map-alist))))
      (when map
        (define-key map key nil)
        (message  "%s unbound for %s" key keymap))))

(defun init-keyboard-options ()
  "Initialize keyboard options."

  (when (optionp 'fix-emacs-cruft)
    ;; What is this, vim? We don't use <insert> here.
    (global-unset-key (kbd "<insert>"))

    ;; Fix C-z weirdness
    (global-unset-key (kbd "C-z"))

    ;; Make C-x C-b a synonym for C-x b
    (global-set-key (kbd "C-x C-b") 'switch-to-buffer)

    ;; Add lambda key
    (global-set-key (kbd "C-|") (lambda ()
                                  (interactive)
                                  (insert-char ?λ)))

    ;; Fix Ctrl-PgUp and Ctrl-PgDown weirdness
    (global-unset-key (kbd "C-<next>"))
    (global-set-key (kbd "C-<next>") 'scroll-down-command)
    (global-set-key (kbd "C-<prior>") 'scroll-up-command)

    ;; Fix C-x C-k and C-x f not being the same as C-x k and C-x C-f respectively
    (global-set-key (kbd "C-x C-k") 'kill-buffer)
    (global-set-key (kbd "C-x f") 'find-file)

    ;; Useful shortcuts for compile
    (global-set-key (kbd "<f5>") 'compile)
    (global-set-key (kbd "<f6>") 'recompile)

    ;; Shortcut for goto-line
    (global-set-key (kbd "M-g") 'goto-line)

    ;; Shortcuts for replace-string, replace-regexp, and align-regexp
    (global-set-key (kbd "M-r") 'replace-string)
    (global-set-key (kbd "C-S-r") 'replace-regexp)
    (global-set-key (kbd "C-S-a") 'align-regexp)

    ;; Shortcut for delete-trailing-whitespace
    (global-set-key (kbd "M-\\") 'delete-trailing-whitespace))

  ;; Enable helm
  (when (optionp 'helm)
    (global-set-key (kbd "M-x") 'helm-M-x))

  ;; Enable god-mode
  (when (optionp 'god-mode)
    (defun god-update-cursor ()
      (setq cursor-type (if god-local-mode 'box 'bar)))
    (add-hook 'god-mode-enabled-hook  'god-update-cursor)
    (add-hook 'god-mode-disabled-hook 'god-update-cursor)
    (when (optionp 'ace-isearch)
      (defun god-ace-isearch ()
        "Pause god-local-mode, start ace-isearch, and resume god-local mode 
when ace-isearch finishes."
        (interactive)
        (god-local-mode-pause)
        (ace-isearch-mode +1)
        (god-local-mode-resume)))
    (global-set-key                (kbd "C-x C-1")    'delete-other-windows)
    (global-set-key                (kbd "C-x C-2")    'split-window-below)
    (global-set-key                (kbd "C-x C-3")    'split-window-right)
    (global-set-key                (kbd "C-x C-0")    'delete-window)
    (global-set-key                (kbd "<escape>")   'god-local-mode)
    (global-set-key                (kbd "<S-escape>") 'cua-rectangle-mark-mode)

    (define-key god-local-mode-map (kbd "i")          'god-local-mode)
    (define-key god-local-mode-map (kbd "C-g")        'god-local-mode)
    (define-key god-local-mode-map (kbd "f")          'god-ace-isearch)
    (define-key god-local-mode-map (kbd "h")          'left-char)
    (define-key god-local-mode-map (kbd "j")          'next-line)
    (define-key god-local-mode-map (kbd "k")          'previous-line)
    (define-key god-local-mode-map (kbd "l")          'right-char)
    (define-key god-local-mode-map (kbd "M-h")        'backward-sexp)
    (define-key god-local-mode-map (kbd "M-j")        'forward-paragraph)
    (define-key god-local-mode-map (kbd "M-k")        'backward-paragraph)
    (define-key god-local-mode-map (kbd "M-l")        'forward-sexp)
    (define-key god-local-mode-map (kbd "C-M-h")      'backward-sexp)
    (define-key god-local-mode-map (kbd "C-M-j")      'forward-paragraph)
    (define-key god-local-mode-map (kbd "C-M-k")      'backward-paragraph)
    (define-key god-local-mode-map (kbd "C-M-l")      'forward-sexp)
    (define-key god-local-mode-map (kbd ".")          'repeat))

  ;; Nano-style line killing/yanking
  (when (optionp 'nano-yank-kill)
    (global-set-key (kbd "C-k") 'kill-whole-line))

  ;; Resize windows with super + arrow keys
  (when (optionp 'super-resize-windows)
    (global-set-key (kbd "s-<left>")  'shrink-window-horizontally)
    (global-set-key (kbd "s-<right>") 'enlarge-window-horizontally)
    (global-set-key (kbd "s-<down>")  'shrink-window)
    (global-set-key (kbd "s-<up>")    'enlarge-window))

  ;; Switch windows with meta + arrow keys
  (when (optionp 'meta-switch-windows)
    (windmove-default-keybindings 'meta)
    (defvar windmove-wrap-around t))

  ;; Fix markdown-mode
  (when (optionp 'fix-markdown)
    (define-key markdown-mode-map (kbd "C-k") nil)
    (define-key markdown-mode-map (kbd "<M-up>") nil)
    (define-key markdown-mode-map (kbd "<M-down>") nil)
    (define-key markdown-mode-map (kbd "<M-left>") nil)
    (define-key markdown-mode-map (kbd "<M-right>") nil))

  ;; Fix org-mode
  (when (optionp 'fix-org)
    (setq org-planning-line-re "")
    (setq org-clock-line-re    "")

    (define-key org-mode-map (kbd "C-k")         nil)
    (define-key org-mode-map (kbd "<C-S-up>")    nil)
    (define-key org-mode-map (kbd "<C-S-down>")  nil)
    (define-key org-mode-map (kbd "<C-S-left>")  nil)
    (define-key org-mode-map (kbd "<C-S-right>") nil)
    (define-key org-mode-map (kbd "<M-S-up>")    nil)
    (define-key org-mode-map (kbd "<M-S-down>")  nil)
    (define-key org-mode-map (kbd "<M-S-left>")  nil)
    (define-key org-mode-map (kbd "<M-S-right>") nil)
    (define-key org-mode-map (kbd "<M-up>")      nil)
    (define-key org-mode-map (kbd "<M-down>")    nil)
    (define-key org-mode-map (kbd "<M-left>")    nil)
    (define-key org-mode-map (kbd "<M-right>")   nil)
    (define-key org-mode-map (kbd "<S-up>")      nil)
    (define-key org-mode-map (kbd "<S-down>")    nil)
    (define-key org-mode-map (kbd "<S-left>")    nil)
    (define-key org-mode-map (kbd "<S-right>")   nil)

    (define-key org-mode-map (kbd "<S-return>")  'org-table-next-row)
    (define-key org-mode-map (kbd "C-c C-c")     'org-toggle-checkbox))

  ;; Free up some keys for keybindings
  (when (optionp 'free-up-keys)
    (global-unset-key (kbd "C-a")))

  ;; Up and down arrow work as you would expect for comint shells
  (when (optionp 'comint-arrow-history)
    (defun comint-after-character-insert-fix ()
      "Reset point to the terminal prompt, but only in `comint'-derived modes."
      (interactive)
      (when (and (derived-mode-p 'comint-mode)
                 (not (comint-after-pmark-p)))
        (let ((c (preceding-char)))
          (delete-backward-char 1)
          (goto-char (point-max))
          (insert-char c))))

    (defun enable-comint-keyboard-fixes ()
      "Enable fixes for `comint'-derived mode key maps."
      (interactive)
      (add-hook 'post-self-insert-hook 'comint-after-character-insert-fix))

    (defun disable-comint-keyboard-fixes ()
      "Disable fixes for `comint'-derived mode key maps."
      (interactive)
      (remove-hook 'post-self-insert-hook 'comint-after-character-insert-fix))

    (enable-comint-keyboard-fixes)

    (defun comint-jump-to-end-and-up ()
      "Jump to end of buffer and run (`comint-previous-input' 1)"
      (interactive)
      (goto-char (point-max))
      (comint-previous-input 1))

    (defun comint-jump-to-end-and-down ()
      "Jump to end of buffer and run (`comint-next-input' 1)"
      (interactive)
      (goto-char (point-max))
      (comint-next-input 1))

    (defun comint-jump-to-end-and-send (&optional x)
      "Jump to end of buffer and run `comint-send-input'"
      (interactive)
      (goto-char (point-max))
      (if x (x) (comint-send-input)))

    (define-key comint-mode-map     (kbd "<up>") 'comint-jump-to-end-and-up)
    (define-key comint-mode-map   (kbd "<down>") 'comint-jump-to-end-and-down)
    (define-key comint-mode-map      (kbd "RET") 'comint-jump-to-end-and-send))

  ;; GNU screen-style keybindings for perspective
  (when (optionp 'perspective)
    (global-set-key (kbd "C-a s") 'persp-switch)
    (global-set-key (kbd "C-a b") 'persp-add-buffer)
    (global-set-key (kbd "C-a a") 'persp-rename)
    (global-set-key (kbd "C-a k") 'persp-kill)
    (global-set-key (kbd "C-a C-s") 'persp-switch)
    (global-set-key (kbd "C-a C-b") 'persp-add-buffer)
    (global-set-key (kbd "C-a C-a") 'persp-rename)
    (global-set-key (kbd "C-a C-k") 'persp-kill))

  ;; Enable smex on M-x, M-X, and <menu>
  (when (optionp 'smex)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    (global-set-key (kbd "<menu>") 'smex))

  ;; Enable CUA keybindings
  (when (optionp 'cua-mode)
    (cua-mode))

  ;; Switch between line and char mode in term with C-'
  (when (optionp 'term-mode-switch)
    (define-key term-raw-map  (kbd "C-'") 'term-line-mode)
    (define-key term-mode-map (kbd "C-'") 'term-char-mode))

  ;; Misc keybindings
  (when (optionp 'ace-jump-mode)
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
  (when (capabilityp "exec-haskell")
    (define-key
      haskell-interactive-mode-map
      (kbd "C-c C-t")
      'haskell-mode-show-type-at)
    (require 'haskell-input-method)
    (add-hook 'haskell-mode-hook 
      (lambda () (set-input-method "haskell-unicode")))))
#+END_SRC
** Hook utility functions
#+BEGIN_SRC emacs-lisp +n
(defun hook-select-flycheck-checker (checker)
  "Select a flycheck checker (CHECKER) in a hook."
  `(lambda () (interactive) (flycheck-select-checker ',checker)))

(defun create-dtw-hook ()
  "Deletes trailing whitespace on save in a hook."
  '(lambda () (add-hook 'write-contents-functions
                        (lambda () (save-excursion (delete-trailing-whitespace))))))

(defun create-untabify-hook ()
  "Untabifies on save in a hook."
  '(lambda () (add-hook 'write-contents-functions
                        (lambda () (save-excursion (untabify))))))

(defun minibuffer-smartparens-mode ()
  "Run the function `smartparens-mode' in the minibuffer, during `eval-expression'."
  '(lambda () (when (eq this-command 'eval-expression) (smartparens-mode))))

(defun do-nothing ()
  "Do nothing, interactively."
  (interactive)
  nil)

(defun make-buffer-unsaveable ()
  "Make the current buffer unsaveable, but still editable.
It will still prompt you to save on exit, if a file is associated
with the buffer in which this was run."
  (interactive)
  ;; FIXME: couldn't find a way to make this work that wasn't annoying
  ;; (local-set-key (kbd "C-x C-s") 'do-nothing)
  ;; (setq buffer-read-only t)
  ;; (setq inhibit-read-only t)
  )

(defun make-buffer-saveable ()
  "Revert the effects of `make-buffer-unsaveable'."
  (interactive)
  (local-unset-key (kbd "C-x C-s"))
  (setq buffer-read-only nil)
  (setq inhibit-read-only nil))

;;(defun guile-fixes ()
;;  "Fixes for `scheme-mode' / guile."
;;  (interactive)
;;  ())

(defun uniq-region (start end)
  "Find duplicate lines in region START to END keeping first occurrence."
  (interactive "*r")
  (save-excursion
    (let ((end (copy-marker end)))
      (while
          (progn
            (goto-char start)
            (re-search-forward "^\\(.*\\)\n\\(\\(.*\n\\)*\\)\\1\n" end t))
        (replace-match "\\1\n\\2")))))
#+END_SRC
** Hooks
#+BEGIN_SRC emacs-lisp +n
(defun init-hooks ()
  "Initialize hook options."
  (when (and (optionsp '(offlineimap wanderlust-email))
             (capabilityp "internet"))
    (add-hook 'wl-hook 'offlineimap))
  (add-hook 'java-mode-hook                (hook-select-flycheck-checker 'java-pmd))
  (add-hook 'java-mode-hook                (create-dtw-hook))
  (add-hook 'lisp-mode-hook                (create-dtw-hook))
  (add-hook 'scheme-mode-hook              (create-dtw-hook))
  (add-hook 'comint-mode-hook              'make-buffer-unsaveable)
  (add-hook 'minibuffer-setup-hook         (minibuffer-smartparens-mode))
  (add-hook 'prog-mode-hook                'rainbow-delimiters-mode)
  (add-hook 'haskell-mode-hook             'turn-on-hi2)
  (add-hook 'haskell-mode-hook             'interactive-haskell-mode)
  (add-hook 'flycheck-mode-hook            'flycheck-haskell-setup))
#+END_SRC
** Miscellaneous
#+BEGIN_SRC emacs-lisp +n
(defun string-tail (string)
  "Return the ``tail'' of a STRING: all of the elements except the first."
  (apply #'string (cdr (string-to-list string))))

;;(require 'elfeed)

(cl-flet* ((kw-to-symbol (kw) (intern (string-tail (symbol-name kw))))
           (add-feed (url &rest tags)
                     (add-to-list 'elfeed-feeds
                                  (cons url (mapcar #'kw-to-symbol tags)))))
  (setq elfeed-feeds '())
  (add-feed "http://slatestarcodex.com/feed"
            :blog :rational)
  (add-feed "http://www.overcomingbias.com/feed"
            :blog :rational)
  (add-feed "https://lobste.rs/rss"
            :news :software)
  (add-feed "https://:news.ycombinator.com/rss"
            :news :software)
  (add-feed "https://hackaday.com/:blog/feed"
            :news :hardware)
  (add-feed "https://pipedot.org/atom"
            :news :software)
  (add-feed "https://www.reddit.com/r/haskell/.rss"
            :news :software)
  (add-feed "https://groups.google.com/forum/feed/haskell-cafe/msgs/rss.xml"
            :email :software :haskell)
  (add-feed "https://planet.haskell.org/rss20.xml"
            :blog :software :haskell)
  (add-feed "https://www.xkcd.com/rss.xml"
            :comic)
  (add-feed "http://www.smbc-comics.com/rss.php"
            :comic))

(define-generic-mode 'bnf-mode
 () ;; comment char: inapplicable because # must be at start of line
 nil ;; keywords
 '(
   ("^#.*" . 'font-lock-comment-face) ;; comments at start of line
   ("^<[^ \t\n]*?>" . 'font-lock-function-name-face) ;; LHS nonterminals
   ("<[^ \t\n]*?>" . 'font-lock-builtin-face) ;; other nonterminals
   ("::=" . 'font-lock-const-face) ;; "goes-to" symbol
   ("\|" . 'font-lock-warning-face) ;; "OR" symbol
   )
 '("\\.bnf\\'") ;; filename suffixes
 nil ;; extra function hooks
 "Major mode for BNF highlighting.")

(define-generic-mode 'abnf-mode
 () ;; comment char: inapplicable because # must be at start of line
 nil ;; keywords
 '(
   ("^#.*" . 'font-lock-comment-face) ;; comments at start of line
   ("^<[^ \t\n]*?>" . 'font-lock-function-name-face) ;; LHS nonterminals
   ("<[^ \t\n]*?>" . 'font-lock-builtin-face) ;; other nonterminals
   ("::=" . 'font-lock-const-face) ;; "goes-to" symbol
   ("\|" . 'font-lock-warning-face) ;; "OR" symbol
   )
 '("\\.bnf\\'") ;; filename suffixes
 nil ;; extra function hooks
 "Major mode for BNF highlighting.")

(define-generic-mode 'peg-mode
 () ;; comment char: inapplicable because # must be at start of line
 nil ;; keywords
 '(
   ("^#.*" . 'font-lock-comment-face) ;; comments at start of line
   ("^<[^ \t\n]*?>" . 'font-lock-function-name-face) ;; LHS nonterminals
   ("<[^ \t\n]*?>" . 'font-lock-builtin-face) ;; other nonterminals
   ("::=" . 'font-lock-const-face) ;; "goes-to" symbol
   ("\|" . 'font-lock-warning-face) ;; "OR" symbol
   )
 '("\\.bnf\\'") ;; filename suffixes
 nil ;; extra function hooks
 "Major mode for BNF highlighting.")

(when (optionp 'erc-fix)
  (add-to-list 'erc-modules 'readonly)
  (add-to-list 'erc-modules 'ring)
  (add-to-list 'erc-modules 'spelling))

(when (optionp 'erc-notifications)
  (add-to-list 'erc-modules 'notifications))

(setq erc-server-history-list '("enigmasm.irc.slack.com"
                                "uiuc-icfp.irc.slack.com"
                                "uiuc-cs.irc.slack.com"
                                "fuspr.irc.slack.com"
                                "fsl-uiuc.irc.slack.com"
                                "enigmasm.irc.slack.com"
                                "irc.w3.org"
                                "irc.freenode.net"))

(defun init-fix-miscellany ()
  "Fix miscellaneous problems in Emacs."
  (when (optionp 'fix-emacs-cruft)
    ;; Use Kotlin in *.kt files
    (add-to-list 'auto-mode-alist '("\\.kt\\'" . kotlin-mode))

    ;; Autosave into ~/.emacs.d/backups
    (setq backup-directory-alist
          `(("." . ,(expand-file-name "~/.emacs.d/backups"))))

    ;; Save all tempfiles in $TMPDIR/emacs$UID/
    (defconst emacs-tmp-dir (format "%s/%s%s/"
                                    temporary-file-directory
                                    "emacs"
                                    (user-uid)))
    (setq auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t)))
    (setq auto-save-list-file-prefix emacs-tmp-dir)

    ;; Enable the upcase-region command
    (put 'upcase-region 'disabled nil)))
#+END_SRC
** Run everything
#+BEGIN_SRC emacs-lisp +n
(defun init-run-functions (functions)
  "Run some FUNCTIONS with profiling/debug/errors depending on the settings."
  (unless (listp functions)
    (error "Wrong argument: init-run-functions takes a list of functions"))
  (let ((run-funcs (lambda ()
                     (if init-profiling-enabled
                         (profile-functions functions)
                       (progn (dolist (element functions)
                                (apply element nil)))))))
    (if init-errors-enabled
        (apply run-funcs nil)
      (ignore-errors (apply run-funcs nil)))))

(init-run-functions '(init-check-prerequisites
                      init-customize-options
                      init-generate-packages
                      init-setup-el-get
                      init-sync-packages
                      init-require-modules
                      init-theme-options
                      init-editing-options
                      init-keyboard-options
                      init-hooks
                      init-fix-miscellany))

(setq-default flycheck-emacs-lisp-load-path load-path)
#+END_SRC
** Commented out code for backup
#+BEGIN_SRC emacs-lisp +n
;; (defgroup erc-away nil
;;   "Automatically set yourself as away through various means."
;;   :group 'erc)
;;
;; (defcustom erc-away-check-idle-time-command t
;;   "The shell command to run to determine the current idle time."
;;   "xprintidle-ng"
;;   :type 'string
;;   :group 'erc-away)
;;
;; (defcustom erc-away-idle-timeout t
;;   "The amount of time in seconds a user must be idle to trigger an away status."
;;   240
;;   :type 'number
;;   :group 'erc-away)
;;
;; (defcustom erc-away-check-delay t
;;   "The amount of time in seconds between idle time checks."
;;   60
;;   :type 'number
;;   :group 'erc-away)
;;
;; (defcustom erc-away-message t
;;   "The away message to set automatically with `erc-away'."
;;   "Currently AFK."
;;   :type 'string
;;   :group 'erc-away)
;;
;; (defvar erc-away-initialize-hook nil
;;   "This hook is run when `erc-away' is initialized.")
;;
;; (defvar erc-away-pre-leave-hook nil
;;   "This hook is run before `erc-away' sets you as having left.")
;;
;; (defvar erc-away-pre-return-hook nil
;;   "This hook is run before `erc-away' sets you as having returned.")
;;
;; (defvar erc-away-post-leave-hook nil
;;   "This hook is run after `erc-away' sets you as having left.")
;;
;; (defvar erc-away-post-return-hook nil
;;   "This hook is run after `erc-away' sets you as having returned.")
;;
;; (defun erc-away/check-idle-time-command ()
;;   "Return the output of running `erc-away-check-idle-time-command' in a shell."
;;   (shell-command-to-string erc-away-check-idle-time-command))
;;
;; (defun erc-away/get-idle-time ()
;;   "Get the current idle time in seconds by parsing the output of
;; `erc-away/check-idle-time-command'."
;;   (/ (string-to-number (erc-away/check-idle-time-command))
;;      1000.0))
;;
;; (defun erc-away/idlep ()
;;   "Is the user currently away according to `erc-away'?"
;;   (> (erc-away/get-idle-time) erc-away-idle-timeout))
;;
;; (defun erc-away/awayp ()
;;   "Is the user currently away on IRC?"
;;   (if (erc-away-time) t nil))
;;
;; (defun erc-away/leave ()
;;   "Set yourself as away."
;;   (run-hooks 'erc-away-pre-leave-hook)
;;   (erc-cmd-AWAY erc-away-message)
;;   (run-hooks 'erc-away-post-leave-hook))
;;
;; (defun erc-away/return ()
;;   "Unset yourself as away."
;;   (run-hooks 'erc-away-pre-return-hook)
;;   (erc-cmd-AWAY "")
;;   (run-hooks 'erc-away-post-return-hook))
;;
;; (defun erc-away/sync-away ()
;;   "If we are currently idle, and we are not away on IRC, run `erc-away/leave'.
;; If we are not currently idle, and we are away on IRC, run `erc-away/return'."
;;   (let ((erc-is-away (erc-away/erc-awayp)))
;;     (if (erc-away/idlep)
;;         (when erc-is-away (erc-away/leave))
;;       (unless erc-is-away (erc-away/return))))
;;
;; (defun erc-away/initialize ()
;;   (run-hooks 'erc-away-initialize-hook)
;;   (run-at-time t erc-away-check-delay 'erc-away/sync-away))
;;
;; (quail-define-rules
;;  ("\\fraka" #X1D586)
;;  ("\\frakb" #X1D587)
;;  ("\\frakc" #X1D588)
;;  ("\\frakd" #X1D589)
;;  ("\\frake" #X1D58A)
;;  ("\\frakf" #X1D58B)
;;  ("\\frakg" #X1D58C)
;;  ("\\frakh" #X1D58D)
;;  ("\\fraki" #X1D58E)
;;  ("\\frakj" #X1D58F)
;;  ("\\frakk" #X1D590)
;;  ("\\frakl" #X1D591)
;;  ("\\frakm" #X1D592)
;;  ("\\frakn" #X1D593)
;;  ("\\frako" #X1D594)
;;  ("\\frakp" #X1D595)
;;  ("\\frakq" #X1D596)
;;  ("\\frakr" #X1D597)
;;  ("\\fraks" #X1D598)
;;  ("\\frakt" #X1D599)
;;  ("\\fraku" #X1D59A)
;;  ("\\frakv" #X1D59B)
;;  ("\\frakw" #X1D59C)
;;  ("\\frakx" #X1D59D)
;;  ("\\fraky" #X1D59E)
;;  ("\\frakz" #X1D59F)
;;  ("\\frakA" #X1D56C)
;;  ("\\frakB" #X1D56D)
;;  ("\\frakC" #X1D56E)
;;  ("\\frakD" #X1D56F)
;;  ("\\frakE" #X1D570)
;;  ("\\frakF" #X1D571)
;;  ("\\frakG" #X1D572)
;;  ("\\frakH" #X1D573)
;;  ("\\frakI" #X1D574)
;;  ("\\frakJ" #X1D575)
;;  ("\\frakK" #X1D576)
;;  ("\\frakL" #X1D577)
;;  ("\\frakM" #X1D578)
;;  ("\\frakN" #X1D579)
;;  ("\\frakO" #X1D57A)
;;  ("\\frakP" #X1D57B)
;;  ("\\frakQ" #X1D57C)
;;  ("\\frakR" #X1D57D)
;;  ("\\frakS" #X1D57E)
;;  ("\\frakT" #X1D57F)
;;  ("\\frakU" #X1D580)
;;  ("\\frakV" #X1D581)
;;  ("\\frakW" #X1D582)
;;  ("\\frakX" #X1D583)
;;  ("\\frakY" #X1D584)
;;  ("\\frakZ" #X1D585))
#+END_SRC
